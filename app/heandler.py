import asyncio
import random
import app.keyboard as kb
from aiogram import Router,F
from aiogram.filters import CommandStart,Command
from aiogram.types import Message,CallbackQuery
from aiogram.fsm.state import StatesGroup,State
from aiogram.fsm.context import FSMContext

router = Router()
account_list = {}
running_task = {}
set_collect = {}
set_stars = {}

class Reg(StatesGroup):
    run_account = State()
    stop_account = State()
    set_time_collet_min = State()
    set_time_collet_max = State()
    set_time_stars_min = State()
    set_time_stars_max = State()
    registration_session = State()
    registration_galaxy = State()
    registration_proxy = State()
    delet_account = State()
    
async def start_task(user_id):
        from run import collect,create_stars
        task1 = asyncio.create_task(collect(user_id))
        await asyncio.sleep(random.randint(10,30))
        task2 = asyncio.create_task(create_stars(user_id))
        return task1,task2
        

async def min_c(user_id):
    TIME_MIN_COLLET = set_collect[user_id][0]["set_time_collet_min"]
    return TIME_MIN_COLLET
    
async def max_c(user_id):
    TIME_MAX_COLLET = set_collect[user_id][0]["set_time_collet_max"]
    return TIME_MAX_COLLET

async def min_s(user_id):
    TIME_MIN_CREATE = set_stars[user_id][0]["set_time_stars_min"]
    return TIME_MIN_CREATE
    
async def max_s(user_id):
    TIME_MAX_CREATE = set_stars[user_id][0]["set_time_stars_max"]
    return TIME_MAX_CREATE

@router.message(CommandStart())
async def start(message:Message):
    user_id = message.from_user.id
    await message.answer_photo(
    photo='AgACAgIAAxkBAAOFZ5T2qeQg51WoZiDVfaefyK1eMYcAAjzoMRutq6hICC13SNTmCgABAQADAgADeAADNgQ',
    caption=f'''
    <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TinyFarmBot</b>üëã
    
    <b>–°–æ—Ñ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å TinyVery.</b>
    
    ‚ñ™Ô∏è<b>–†–∞–±–æ—Ç–∞ —á–µ—Ä–µ–∑ session –∏ galaxy_id</b>
    ‚ñ™Ô∏è<b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–∫—Å–∏</b>
    ‚ñ™Ô∏è<b>–†—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –≤—Ä–µ–º–µ–Ω–∏ —Å–±–æ—Ä–∞ –ø—ã–ª–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–≤–µ–∑–¥</b>
    ‚ñ™Ô∏è<b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä –ø—ã–ª–∏ –∏ –∑–≤–µ–∑–¥</b>
    ‚ñ™Ô∏è<b>–ù–∏–∫–∞–∫ –Ω–µ –∫–∞—Å–∞–µ—Ç—Å—è –≤–∞—à–µ–≥–æ —Ç–≥ –∞–∫–∫–∞—É–Ω—Ç–∞</b>
    ''',
    parse_mode='HTML'
    )
    if user_id not in account_list:
        account_list[user_id] = []
    if user_id not in set_collect:
        set_collect[user_id] = []
    if user_id not in set_stars:
        set_stars[user_id] = []
        
#–ö–Ω–æ–ø–∫–∞ "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"
@router.message(Command('menu'))
async def menu(message:Message):
    user_id = message.from_user.id
    await message.answer(text=f'–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Çüñ•Ô∏è\n–ê–∫–∞—É–Ω—Ç–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ:{len(account_list[user_id])}',reply_markup=kb.connect)
    
#–ü–µ—Ä–µ—Ö–æ–¥ –≤ "–ú–µ–Ω—é"
@router.callback_query(F.data == 'connected')
async def connectes(callback:CallbackQuery):
    await callback.answer(text='–ò–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞',)
    await callback.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:',reply_markup=kb.menu)

#–ó–∞–ø—É—Å–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
@router.callback_query(F.data == 'run')
async def start_one(callback:CallbackQuery,state:FSMContext):
    await callback.answer('–ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥')
    await state.set_state(Reg.run_account)
    await callback.message.answer('<b>–ù–∞–ø–∏—à–∏—Ç–µ "run",—á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å!</b>',parse_mode='HTML')

@router.message(Reg.run_account)
async def start_two(message:Message,state:FSMContext):
    await state.update_data(run_account = str(message.text))
    data = await state.get_data()
    user_id = message.from_user.id
    if data["run_account"].lower()== "run":
        if user_id in running_task:
            task = running_task[user_id]
            if not task[0].done() or not task[1].done():
                await message.answer('Tiny —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!ü§ñ')    
        elif len(account_list[user_id]) == 0:
            await message.answer('–¢—ã —á—Ç–æ —Å–æ–≤—Å–µ–º –Ω–µ –≤–∏–¥–µ—à—å,—á—Ç–æ "–°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤üìã" –ø—É—Å—Ç!')   
        else:
            running_task[user_id] = await start_task(user_id)
            await message.answer('Tiny –∑–∞–ø—É—â–µ–Ω‚úÖ!')
    else:
        await message.answer('–ù–µ–º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç—É!\n–ß—Ç–æ –±—ã –≤—Å–µ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∞ –≤–µ–¥–µ–∏—Ç–µ:"run"!')
    await state.clear()
    
#–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç
@router.callback_query(F.data == 'stop')
async def stop_one(callback:CallbackQuery,state:FSMContext):
    await callback.answer('–ò–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞')
    await state.set_state(Reg.stop_account)
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ "stop",–µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∫—Ä–∏–ø—Ç')

@router.message(Reg.stop_account)
async def stop_two(message:Message,state:FSMContext):
    await state.update_data(stop_account = message.text)
    data = await state.get_data()
    user_id = message.from_user.id
    if data["stop_account"].lower() == "stop":
        if user_id in running_task:
            tasks = running_task[user_id]

            if not tasks[0].done() or not tasks[1].done():
                tasks[0].cancel()
                tasks[1].cancel()
            try:
                await tasks[0]
                await tasks[1]
            except asyncio.CancelledError:
                pass
            del running_task[user_id]
            await message.answer('Tiny –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω‚ùå')
        else:
            await message.answer('–î–∞,–Ω—É –∫–∞–∫ —Ç–∞–∫,–Ω–µ—Ç—É –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤')
    else:
        await message.answer('–ù–µ–º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç—É!\n–ß—Ç–æ –±—ã –≤—Å–µ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∞ –≤–µ–¥–µ–∏—Ç–µ:"stop"!')
    await state.clear()
        
#–ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"
@router.callback_query(F.data == 'account')
async def add_one_data(callback:CallbackQuery,state: FSMContext):
    await callback.answer(text='–ò–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞')
    await state.set_state(Reg.registration_session)
    await callback.message.answer(text='<b>–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π SESSION:</b>',parse_mode='HTML')
    
@router.message(Reg.registration_session)
async def add_two_data(message:Message,state:FSMContext):
    await state.update_data(registration_session = message.text)
    await state.set_state(Reg.registration_galaxy)
    await message.answer(text='<b>–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π GALAXY</b>',parse_mode='HTML')

@router.message(Reg.registration_galaxy)
async def add_tree_data(message:Message,state: FSMContext):
    await state.update_data(registration_galaxy = message.text)
    await state.set_state(Reg.registration_proxy)
    await message.answer(text='<b>–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π PROXY</b>\n<b>–í —Ñ–æ—Ä–º–∞—Ç–µ</b>\n<i>http://user:pass@ip:port</i>\n<b>–ï—Å–ª–∏ –Ω–µ—Ç—É PROXY –Ω–∞–ø–∏—à–∏ "No"</b>',parse_mode='HTML')

@router.message(Reg.registration_proxy)
async def add_end_data(message:Message,state:FSMContext):
    await state.update_data(registration_proxy = message.text)
    user_id = message.from_user.id
    data = await state.get_data()
    if data["registration_proxy"].lower() == 'no':
        data["registration_proxy"] = None
        account_list[user_id].append(data)
        await message.answer(text=f'–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫')
        await state.clear()
    else:
        account_list[user_id].append(data)
        await message.answer(text=f'–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫')
        await state.clear()

#–ù–∞—Å—Ç—Ä–æ–π–∫–∏
@router.callback_query(F.data == 'setting')
async def setting_one(callback:CallbackQuery):
    await callback.answer('–ó–∞–≥—Ä—É–∑–∫–∞')
    await callback.message.edit_text(text='–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –≤—Ä–µ–º–µ–Ω–∏ –∞–≤—Ç–æ-—Å–±–æ—Ä–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—å—Å—è –≤ "—Å–µ–∫—É–Ω–¥–∞—Ö".\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"–°–±–æ—Ä –ø—ã–ª–∏" –æ–∫–æ–ª–æ 1 —á–∞—Å–∞.\n"–°–±–æ—Ä –∑–≤–µ–∑–¥" —Å—Ç–∞–≤–∏—Ç—å –Ω–∞ 5 - 15 –º–∏–Ω –±–æ–ª—å—à–µ,—á–µ–º —Å–±–æ—Ä –ø—ã–ª–∏.\n',reply_markup=kb.set)
    
#–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º—è —Å–±–æ—Ä–∞ –ø—ã–ª–∏
@router.callback_query(F.data == 'dust')
async def dust_one(callback:CallbackQuery,state:FSMContext):
    await callback.answer('–û —É–∂–µ –ø–æ—á—Ç–∏')
    await state.set_state(Reg.set_time_collet_min)
    await callback.message.answer('–î–∏–∞–ø–∞–∑–æ–Ω —Å–µ–∫—É–Ω–¥ "–û—Ç"')

@router.message(Reg.set_time_collet_min)
async def dust_two(message:Message,state:FSMContext):
    await state.update_data(set_time_collet_min=int(message.text))
    await state.set_state(Reg.set_time_collet_max)
    await message.answer('–î–∏–∞–ø–∞–∑–æ–Ω —Å–µ–∫—É–Ω–¥ "–î–æ"')
    
@router.message(Reg.set_time_collet_max)
async def dust_tree(message:Message,state:FSMContext):
    await state.update_data(set_time_collet_max=int(message.text))
    user_id = message.from_user.id
    data = await state.get_data()
    
    if user_id not in set_collect:
        set_collect[user_id] = []
    
    if len(set_collect[user_id]) == 0:
        set_collect[user_id].append(data)
        await message.answer('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã!')
        await min_c(user_id)
        await max_c(user_id)
    else:
        set_collect[user_id][0].update(data)
        await message.answer('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–º–µ–Ω–µ–Ω—ã!')
        await min_c(user_id)
        await max_c(user_id)
    await state.clear()

#–ù–∞—Å—Ç—Ä–æ–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–±–æ—Ä–∞ –∑–≤–µ–∑–¥
@router.callback_query(F.data == 'stars')
async def stars_one(callback:CallbackQuery,state:FSMContext):
    await callback.answer('–£–∂–µ –∑–∞–≥—Ä—É–∂–∞–µ–º')
    await state.set_state(Reg.set_time_stars_min)
    await callback.message.answer('–î–∏–∞–ø–∞–∑–æ–Ω —Å–µ–∫—É–Ω–¥ "–û—Ç"')

@router.message(Reg.set_time_stars_min)
async def stars_two(message:Message,state:FSMContext):
    await state.update_data(set_time_stars_min=int(message.text))
    await state.set_state(Reg.set_time_stars_max)
    await message.answer('–î–∏–∞–ø–∞–∑–æ–Ω —Å–µ–∫—É–Ω–¥ "–î–æ"')
    
@router.message(Reg.set_time_stars_max)
async def stars_tree(message:Message,state:FSMContext):
    await state.update_data(set_time_stars_max=int(message.text))
    user_id = message.from_user.id
    data = await state.get_data()
    
    if user_id not in set_stars:
        set_stars[user_id] = []
    
    if len(set_stars[user_id]) == 0:
        set_stars[user_id].append(data)
        await message.answer('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã!')
        await min_s(user_id)
        await max_s(user_id)
    else:
        set_stars[user_id][0].update(data)
        await message.answer('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–º–µ–Ω–µ–Ω—ã')
        await min_s(user_id)
        await max_s(user_id)
    await state.clear()
    
    
#–ö–Ω–æ–ø–∫–∞ "–°–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"
@router.callback_query(F.data == 'list_account')
async def list(callback:CallbackQuery):
    user_id = callback.from_user.id
    if len(account_list[user_id]) == 0:
        await callback.message.answer('–ß—Ç–æ?\n–£ —Ç–µ–±—è –Ω–µ—Ç—É –¥–æ–±–∞–≤–ª–µ–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤!\n–ê –Ω—É-–∫–∞ –¥–æ–±–∞–≤—å –±—ã—Å—Ç—Ä–µ–µ')
    else:
        lst = [f'{n})\nSESSION: {i["registration_session"]}\nGALAXY: {i["registration_galaxy"]}\nPROXY: {i["registration_proxy"]}\n' for n,i in enumerate(account_list[user_id])]
        await callback.answer('–û–ø–∞ –ø—Ä–æ–≥—Ä—É–∂–∞–µ–º')
        await callback.message.answer(text='\n'.join(lst))

#–ö–Ω–æ–ø–∫–∞ "–£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"
@router.callback_query(F.data == 'del_account')
async def del_one(callback:CallbackQuery,state:FSMContext):
    await callback.answer(text='–©–∞—Å')
    await state.set_state(Reg.delet_account)
    await callback.message.answer(text='–ù—É-–∫–∞ –≤–≤–æ–¥–∏ –Ω–æ–º–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞,–∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å:')

@router.message(Reg.delet_account)
async def del_two(message:Message,state:FSMContext):
    await state.update_data(delet_account = int(message.text))
    user_id = message.from_user.id
    data = await state.get_data()
    lst_data = account_list[user_id]
    if len(lst_data) > data["delet_account"]:
        del lst_data[data["delet_account"]]
        await message.answer(text=f'–ê –Ω–∞–¥–æ –±—ã–ª–æ?\n–ù–æ –∞–∫–∫–∞—É–Ω—Ç {data["delet_account"]} —É–∂–µ —É–¥–∞–ª–µ–Ω')
    else:
        await message.answer(text=f'–û–ø–∞! –ù–µ—Ç—É —Ç–∞–∫–æ–≥–æ {data["delet_account"]} –∞–∫–∫–∞—É–Ω—Ç–∞')
    await state.clear()

    
    
    
    
    
    